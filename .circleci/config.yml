version: 2

workflows:
  version: 2
  test:
    jobs:
      - build-python-3.6
      - build-python-3.7

jobs:
  build-python-3.6: &template
    docker:
      - image: python:3.6
    steps:
      - checkout
      # - run: git submodule update --init --recursive  # activate as needed
      - run:
          name: check that dev-requirements are a superset of requirements
          working_directory: ~/project/
          command: |
            if [[ $(comm -23 <(sort requirements.txt) <(sort dev-requirements.txt)) ]]
              then exit 1
            fi
      - restore_cache:
          keys:
            - pip-{{ checksum "dev-requirements.txt" }}-{{ checksum "requirements.txt" }}
      - run:
          name: Install Python requirements
          working_directory: ~/project/
          command: |
              pip install --progress-bar off --upgrade pip setuptools
              pip install --progress-bar off -r dev-requirements.txt
      - save_cache:
          key: pip-{{ checksum "dev-requirements.txt" }}-{{ checksum "requirements.txt" }}
          paths:
            - ~/.cache/pip
      - run:
          name: Build source distribution and install package from it
          # Ensure we can build a source distribution that can correctly install.
          # "python setup.py sdist" creates dist/<package-name>-x.y.z.tar.gz
          command: |
              python setup.py sdist
              pip install dist/`ls dist/ | grep .tar.gz`
      - run:
          name: Run linter
          working_directory: ~/
          # Avoid being able to import wikipron.py by relative import.
          # Test code by importing the *installed* wikipron in site-packages.
          command: flake8 project/foobar
      - run:
          name: Run python tests
          working_directory: ~/
          # Avoid being able to import wikipron.py by relative import.
          # Test code by importing the *installed* wikipron in site-packages.
          command: pytest -vv --cov=project/foobar project/foobar
      - run:
          name: Dependency Security Check
          working_directory: ~/project/
          command: safety check
      - run:
          name: Source Code Security Check
          working_directory: ~/project/
          command: bandit -r foobar -x tests
  build-python-3.7:
    <<: *template
    docker:
      - image: python:3.7
