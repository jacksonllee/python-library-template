version: 2

workflows:
  version: 2
  test:
    jobs:
      - build-python-3.6
      - build-python-3.7

jobs:
  build-python-3.6: &template
    docker:
      - image: python:3.6
    steps:
      - checkout

# Activate as needed.
#      - run: git submodule update --init --recursive

# If building an app instead of a library,
# we may consider caching the build environment.
#      - restore_cache:
#          keys:
#            - pip-{{ checksum "dev-requirements.txt" }}-{{ checksum "requirements.txt" }}
#      - save_cache:
#          key: pip-{{ checksum "dev-requirements.txt" }}-{{ checksum "requirements.txt" }}
#          paths:
#            - ~/.cache/pip

# Activate if both requirements.txt and dev-requirements.txt are used for an app.
#      - run:
#          name: check that dev-requirements are a superset of requirements
#          working_directory: ~/project/
#          command: |
#            if [[ $(comm -23 <(sort requirements.txt) <(sort dev-requirements.txt)) ]]
#              then exit 1
#            fi

      - run:
          name: Build source distribution and install package from it
          working_directory: ~/project/
          # Test that we can build a source distribution that can correctly
          # install from clean slate.
          # "python setup.py sdist" creates dist/<package-name>-x.y.z.tar.gz
          command: |
              pip install --progress-bar off --upgrade pip setuptools
              python setup.py sdist
              pip install dist/`ls dist/ | grep .tar.gz`
      - run:
          name: Install the full development requirements
          working_directory: ~/project/
          command: pip install --progress-bar off -r requirements.txt
      - run:
          name: Show installed Python packages
          command: pip list
      - run:
          name: Run linter
          working_directory: ~/
          # Avoid being able to do relative imports.
          # Test code by importing the *installed* library in site-packages.
          command: flake8 project/foobar
      - run:
          name: Run python tests
          working_directory: ~/
          # Avoid being able to do relative imports.
          # Test code by importing the *installed* library in site-packages.
          command: pytest -vv project/foobar
      - run:
          name: Dependency Security Check
          working_directory: ~/project/
          command: safety check
      - run:
          name: Source Code Security Check
          working_directory: ~/project/
          command: bandit -r foobar -x tests
  build-python-3.7:
    <<: *template
    docker:
      - image: python:3.7
